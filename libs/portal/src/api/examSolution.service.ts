/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InlineResponse404 } from '../model/inlineResponse404';
import { PastExamsHubCoreApplicationExamSoultionsCommandsCreateCreateExamSolutionCommandResult } from '../model/pastExamsHubCoreApplicationExamSoultionsCommandsCreateCreateExamSolutionCommandResult';
import { PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommand } from '../model/pastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommand';
import { PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommandResult } from '../model/pastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommandResult';
import { PastExamsHubCoreApplicationExamSoultionsQueriesGetCollectionGetExamSolutionsQueryResult } from '../model/pastExamsHubCoreApplicationExamSoultionsQueriesGetCollectionGetExamSolutionsQueryResult';
import { PastExamsHubCoreApplicationExamSoultionsQueriesGetSingleGetExamSolutionQueryResult } from '../model/pastExamsHubCoreApplicationExamSoultionsQueriesGetSingleGetExamSolutionQueryResult';
import { PastExamsHubCoreApplicationGradesCommandsCreateCreateGradeCommandResult } from '../model/pastExamsHubCoreApplicationGradesCommandsCreateCreateGradeCommandResult';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ExamSolutionService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param examUid 
     * @param pageNumber 
     * @param pageSize 
     * @param searchText 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public examSolutionGet(examUid?: string, pageNumber?: number, pageSize?: number, searchText?: string, observe?: 'body', reportProgress?: boolean): Observable<PastExamsHubCoreApplicationExamSoultionsQueriesGetCollectionGetExamSolutionsQueryResult>;
    public examSolutionGet(examUid?: string, pageNumber?: number, pageSize?: number, searchText?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PastExamsHubCoreApplicationExamSoultionsQueriesGetCollectionGetExamSolutionsQueryResult>>;
    public examSolutionGet(examUid?: string, pageNumber?: number, pageSize?: number, searchText?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PastExamsHubCoreApplicationExamSoultionsQueriesGetCollectionGetExamSolutionsQueryResult>>;
    public examSolutionGet(examUid?: string, pageNumber?: number, pageSize?: number, searchText?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (examUid !== undefined && examUid !== null) {
            queryParameters = queryParameters.set('ExamUid', <any>examUid);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }
        if (searchText !== undefined && searchText !== null) {
            queryParameters = queryParameters.set('SearchText', <any>searchText);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PastExamsHubCoreApplicationExamSoultionsQueriesGetCollectionGetExamSolutionsQueryResult>('get',`${this.basePath}/ExamSolution`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param examSolutionUid 
     * @param isPositive 
     * @param isUpdate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public examSolutionGradePost(examSolutionUid?: string, isPositive?: boolean, isUpdate?: boolean, observe?: 'body', reportProgress?: boolean): Observable<PastExamsHubCoreApplicationGradesCommandsCreateCreateGradeCommandResult>;
    public examSolutionGradePost(examSolutionUid?: string, isPositive?: boolean, isUpdate?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PastExamsHubCoreApplicationGradesCommandsCreateCreateGradeCommandResult>>;
    public examSolutionGradePost(examSolutionUid?: string, isPositive?: boolean, isUpdate?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PastExamsHubCoreApplicationGradesCommandsCreateCreateGradeCommandResult>>;
    public examSolutionGradePost(examSolutionUid?: string, isPositive?: boolean, isUpdate?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (examSolutionUid !== undefined && examSolutionUid !== null) {
            queryParameters = queryParameters.set('ExamSolutionUid', <any>examSolutionUid);
        }
        if (isPositive !== undefined && isPositive !== null) {
            queryParameters = queryParameters.set('IsPositive', <any>isPositive);
        }
        if (isUpdate !== undefined && isUpdate !== null) {
            queryParameters = queryParameters.set('IsUpdate', <any>isUpdate);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PastExamsHubCoreApplicationGradesCommandsCreateCreateGradeCommandResult>('post',`${this.basePath}/ExamSolution/Grade`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param uid 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public examSolutionUidDelete(uid: string, body?: PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommand, observe?: 'body', reportProgress?: boolean): Observable<PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommandResult>;
    public examSolutionUidDelete(uid: string, body?: PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommandResult>>;
    public examSolutionUidDelete(uid: string, body?: PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommandResult>>;
    public examSolutionUidDelete(uid: string, body?: PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling examSolutionUidDelete.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<PastExamsHubCoreApplicationExamSoultionsCommandsDeleteDeleteExamSolutionCommandResult>('delete',`${this.basePath}/ExamSolution/${encodeURIComponent(String(uid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param uid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public examSolutionUidGet(uid: string, observe?: 'body', reportProgress?: boolean): Observable<PastExamsHubCoreApplicationExamSoultionsQueriesGetSingleGetExamSolutionQueryResult>;
    public examSolutionUidGet(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PastExamsHubCoreApplicationExamSoultionsQueriesGetSingleGetExamSolutionQueryResult>>;
    public examSolutionUidGet(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PastExamsHubCoreApplicationExamSoultionsQueriesGetSingleGetExamSolutionQueryResult>>;
    public examSolutionUidGet(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling examSolutionUidGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PastExamsHubCoreApplicationExamSoultionsQueriesGetSingleGetExamSolutionQueryResult>('get',`${this.basePath}/ExamSolution/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param file 
     * @param examUid 
     * @param comment 
     * @param taskNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public examSolutionUploadPostForm(file?: Blob, examUid?: string, comment?: string, taskNumber?: number, observe?: 'body', reportProgress?: boolean): Observable<PastExamsHubCoreApplicationExamSoultionsCommandsCreateCreateExamSolutionCommandResult>;
    public examSolutionUploadPostForm(file?: Blob, examUid?: string, comment?: string, taskNumber?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PastExamsHubCoreApplicationExamSoultionsCommandsCreateCreateExamSolutionCommandResult>>;
    public examSolutionUploadPostForm(file?: Blob, examUid?: string, comment?: string, taskNumber?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PastExamsHubCoreApplicationExamSoultionsCommandsCreateCreateExamSolutionCommandResult>>;
    public examSolutionUploadPostForm(file?: Blob, examUid?: string, comment?: string, taskNumber?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (examUid !== undefined && examUid !== null) {
            queryParameters = queryParameters.set('ExamUid', <any>examUid);
        }
        if (comment !== undefined && comment !== null) {
            queryParameters = queryParameters.set('Comment', <any>comment);
        }
        if (taskNumber !== undefined && taskNumber !== null) {
            queryParameters = queryParameters.set('TaskNumber', <any>taskNumber);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('File', <any>file) as any || formParams;
        }

        return this.httpClient.request<PastExamsHubCoreApplicationExamSoultionsCommandsCreateCreateExamSolutionCommandResult>('post',`${this.basePath}/ExamSolution/upload`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
